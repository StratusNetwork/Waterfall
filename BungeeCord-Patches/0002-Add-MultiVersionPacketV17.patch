From f31f0a36361875e9c8a01799b10395c5d8f26ffd Mon Sep 17 00:00:00 2001
From: cswhite2000 <18whitechristop@gmail.com>
Date: Sat, 2 Sep 2017 16:24:29 -0700
Subject: [PATCH] Add MultiVersionPacketV17


diff --git a/protocol/src/main/java/io/github/waterfallmc/travertine/protocol/MultiVersionPacketV17.java b/protocol/src/main/java/io/github/waterfallmc/travertine/protocol/MultiVersionPacketV17.java
new file mode 100644
index 00000000..90064112
--- /dev/null
+++ b/protocol/src/main/java/io/github/waterfallmc/travertine/protocol/MultiVersionPacketV17.java
@@ -0,0 +1,90 @@
+package io.github.waterfallmc.travertine.protocol;
+
+import com.google.common.base.Preconditions;
+import io.netty.buffer.ByteBuf;
+
+import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+public abstract class MultiVersionPacketV17 extends DefinedPacket
+{
+
+    protected void v17Read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        v17Read( buf );
+    }
+
+    @Override
+    public void read0(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        switch ( protocolVersion )
+        {
+            case ProtocolConstants.MINECRAFT_1_7_2:
+            case ProtocolConstants.MINECRAFT_1_7_6:
+                v17Read(buf, direction, protocolVersion);
+                break;
+            default:
+                read(buf, direction, protocolVersion);
+                break;
+        }
+    }
+
+    protected void v17Write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        v17Write( buf );
+    }
+
+    @Override
+    public void write0(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        switch ( protocolVersion )
+        {
+            case ProtocolConstants.MINECRAFT_1_7_2:
+            case ProtocolConstants.MINECRAFT_1_7_6:
+                v17Write(buf, direction, protocolVersion);
+                break;
+            default:
+                write(buf, direction, protocolVersion);
+                break;
+        }
+    }
+    protected void v17Read(ByteBuf buf)
+    {
+        throw new UnsupportedOperationException( "Packet must implement read method" );
+    }
+
+    protected void v17Write(ByteBuf buf)
+    {
+        throw new UnsupportedOperationException( "Packet must implement write method" );
+    }
+
+    public static void v17writeArray(byte[] b, ByteBuf buf, boolean allowExtended)
+    {
+        // (Integer.MAX_VALUE & 0x1FFF9A ) = 2097050 - Forge's current upper limit
+        if ( allowExtended )
+        {
+            Preconditions.checkArgument( b.length <= ( Integer.MAX_VALUE & 0x1FFF9A ), "Cannot send array longer than 2097050 (got %s bytes)", b.length );
+        } else
+        {
+            Preconditions.checkArgument( b.length <= Short.MAX_VALUE, "Cannot send array longer than Short.MAX_VALUE (got %s bytes)", b.length );
+        }
+        // Write a 2 or 3 byte number that represents the length of the packet. (3 byte "shorts" for Forge only)
+        // No vanilla packet should give a 3 byte packet, this method will still retain vanilla behaviour.
+        writeVarShort( buf, b.length );
+        buf.writeBytes( b );
+    }
+
+    public static byte[] v17readArray(ByteBuf buf)
+    {
+        // Read in a 2 or 3 byte number that represents the length of the packet. (3 byte "shorts" for Forge only)
+        // No vanilla packet should give a 3 byte packet, this method will still retain vanilla behaviour.
+        int len = readVarShort( buf );
+
+        // (Integer.MAX_VALUE & 0x1FFF9A ) = 2097050 - Forge's current upper limit
+        Preconditions.checkArgument( len <= ( Integer.MAX_VALUE & 0x1FFF9A ), "Cannot receive array longer than 2097050 (got %s bytes)", len );
+
+        byte[] ret = new byte[ len ];
+        buf.readBytes( ret );
+        return ret;
+    }
+}
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java b/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
index 10e16d79..04a34033 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
@@ -193,6 +193,11 @@ public abstract class DefinedPacket
         read( buf );
     }
 
+    public void read0(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        read( buf, direction, protocolVersion );
+    }
+
     public void write(ByteBuf buf)
     {
         throw new UnsupportedOperationException( "Packet must implement write method" );
@@ -203,6 +208,11 @@ public abstract class DefinedPacket
         write( buf );
     }
 
+    public void write0(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        write( buf, direction, protocolVersion );
+    }
+
     public abstract void handle(AbstractPacketHandler handler) throws Exception;
 
     @Override
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
index e7cb3803..12278719 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
@@ -30,7 +30,7 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
             DefinedPacket packet = prot.createPacket( packetId, protocolVersion );
             if ( packet != null )
             {
-                packet.read( in, prot.getDirection(), protocolVersion );
+                packet.read0( in, prot.getDirection(), protocolVersion );
 
                 if ( in.isReadable() )
                 {
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java
index d4b03843..9aac7ca9 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java
@@ -21,6 +21,6 @@ public class MinecraftEncoder extends MessageToByteEncoder<DefinedPacket>
     {
         Protocol.DirectionData prot = ( server ) ? protocol.TO_CLIENT : protocol.TO_SERVER;
         DefinedPacket.writeVarInt( prot.getId( msg.getClass(), protocolVersion ), out );
-        msg.write( out, prot.getDirection(), protocolVersion );
+        msg.write0( out, prot.getDirection(), protocolVersion );
     }
 }
-- 
2.11.0 (Apple Git-81)

