From 338f3734e21bc090d4468191c3e2dff1fb045984 Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Tue, 31 Jan 2017 22:00:12 -0500
Subject: [PATCH] Implement config.yml loading


diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginConfigurationLoader.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginConfigurationLoader.java
new file mode 100644
index 00000000..ec801fe7
--- /dev/null
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginConfigurationLoader.java
@@ -0,0 +1,51 @@
+package net.md_5.bungee.api.plugin;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.util.logging.Level;
+import javax.inject.Inject;
+
+import com.google.common.io.ByteStreams;
+import com.google.common.io.Files;
+import net.md_5.bungee.config.Configuration;
+import net.md_5.bungee.config.ConfigurationProvider;
+import net.md_5.bungee.config.YamlConfiguration;
+
+public class PluginConfigurationLoader {
+    private static final String CONFIG_FILENAME = "config.yml";
+
+    private final Plugin plugin;
+
+    @Inject PluginConfigurationLoader(Plugin plugin) {
+        this.plugin = plugin;
+    }
+
+    public Configuration loadConfig() {
+        final String pluginName = plugin.getDescription().getName();
+        try {
+            File configFile = new File(plugin.getDataFolder(), CONFIG_FILENAME);
+
+            if(!configFile.exists()) {
+                InputStream resourceStream = plugin.getResourceAsStream(CONFIG_FILENAME);
+                if(resourceStream != null) {
+                    plugin.getLogger().info(String.format("[{0}] No config file detected. Copying default config from jar", pluginName));
+
+                    if(!plugin.getDataFolder().mkdirs()) {
+                        throw new IOException("Failed to create plugin data folder");
+                    }
+
+                    try(OutputStream os = Files.asByteSink(configFile).openStream()) {
+                        ByteStreams.copy(resourceStream, os);
+                    }
+                }
+            }
+
+            return ConfigurationProvider.getProvider(YamlConfiguration.class).load(configFile);
+        } catch (IOException e) {
+            plugin.getLogger().log(Level.SEVERE, String.format("[{0}] Failed to read configuration file: {1}", pluginName, e.getMessage()), e);
+            return new Configuration();
+        }
+    }
+}
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginModule.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginModule.java
index bd309e8e..4d505803 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/PluginModule.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginModule.java
@@ -24,6 +24,8 @@ public class PluginModule extends ProtectedModule {
         bind(ExceptionHandler.class).to(PluginExceptionHandler.class).in(Singleton.class);
         bind(EventRegistry.class).to(PluginEventRegistry.class).in(Singleton.class);
         bind(Scheduler.class).to(PluginScheduler.class).in(Singleton.class);
+
+        bind(PluginConfigurationLoader.class).in(Singleton.class);
     }
 
     @Provides
@@ -35,4 +37,9 @@ public class PluginModule extends ProtectedModule {
     PluginLogger logger(Plugin plugin) {
         return (PluginLogger) plugin.getLogger();
     }
+
+    @Provides @Singleton
+    Configuration configuration(PluginConfigurationLoader loader) {
+        return loader.loadConfig();
+    }
 }
-- 
2.11.0 (Apple Git-81)

