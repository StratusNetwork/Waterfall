From 7f7290edbdee433937cb506682d3bfe3804d6836 Mon Sep 17 00:00:00 2001
From: Jedediah Smith <jedediah@silencegreys.com>
Date: Sun, 4 Oct 2015 01:53:42 -0400
Subject: [PATCH] Remove parent field from BaseComponent


diff --git a/chat/src/main/java/net/md_5/bungee/api/ChatColor.java b/chat/src/main/java/net/md_5/bungee/api/ChatColor.java
index cd88bd47..85291a88 100644
--- a/chat/src/main/java/net/md_5/bungee/api/ChatColor.java
+++ b/chat/src/main/java/net/md_5/bungee/api/ChatColor.java
@@ -105,6 +105,15 @@ public enum ChatColor
      */
     public static final char COLOR_CHAR = '\u00A7';
     public static final String ALL_CODES = "0123456789AaBbCcDdEeFfKkLlMmNnOoRr";
+
+    public static final ChatColor[] DECORATIONS = {
+        BOLD,
+        ITALIC,
+        UNDERLINE,
+        STRIKETHROUGH,
+        MAGIC
+    };
+
     /**
      * Pattern to remove all colour codes.
      */
diff --git a/chat/src/main/java/net/md_5/bungee/api/ChatStringBuilder.java b/chat/src/main/java/net/md_5/bungee/api/ChatStringBuilder.java
new file mode 100644
index 00000000..a3b0a2be
--- /dev/null
+++ b/chat/src/main/java/net/md_5/bungee/api/ChatStringBuilder.java
@@ -0,0 +1,106 @@
+package net.md_5.bungee.api;
+
+import java.util.EnumSet;
+import java.util.Set;
+
+public class ChatStringBuilder {
+
+    private final StringBuilder builder;
+    private ChatColor oldColor, newColor;
+    private final Set<ChatColor> oldDecorations, newDecorations;
+    private boolean formatChanged = true;
+
+    public ChatStringBuilder(String initial, ChatColor color, Set<ChatColor> decorations) {
+        builder = initial != null ? new StringBuilder(initial) : new StringBuilder();
+
+        oldColor = newColor = color;
+
+        oldDecorations = decorations != null ? EnumSet.copyOf(decorations) : EnumSet.noneOf(ChatColor.class);
+        newDecorations = EnumSet.noneOf(ChatColor.class);
+    }
+
+    public ChatStringBuilder() {
+        this(null, ChatColor.RESET, null);
+    }
+
+    @Override
+    public String toString() {
+        return builder.toString();
+    }
+
+    private void refreshComplete() {
+        builder.append(oldColor = newColor);
+
+        oldDecorations.clear();
+        for(ChatColor deco : newDecorations) {
+            oldDecorations.add(deco);
+            builder.append(deco);
+        }
+    }
+
+    private void refreshIfChanged() {
+        if(!formatChanged) return;
+
+        // If color changed, a complete refresh is required
+        if(oldColor != newColor) {
+            refreshComplete();
+            return;
+        }
+
+        // If any decorations were removed, a complete refresh is required
+        for(ChatColor deco : oldDecorations) {
+            if(!newDecorations.contains(deco)) {
+                refreshComplete();
+                return;
+            }
+        }
+
+        // If the only change is added decorations, they can just be appended
+        for(ChatColor deco : newDecorations) {
+            if(oldDecorations.add(deco)) {
+                builder.append(deco);
+            }
+        }
+    }
+
+    public void append(String text) {
+        if(!text.isEmpty()) {
+            refreshIfChanged();
+            builder.append(text);
+        }
+    }
+
+    public void append(Object thing) {
+        append(String.valueOf(thing));
+    }
+
+    public void color(ChatColor color) {
+        if(newColor != color) {
+            formatChanged = true;
+            newColor = color;
+        }
+    }
+
+    public void decoration(ChatColor decoration, boolean on) {
+        if(on) {
+            if(newDecorations.add(decoration)) {
+                formatChanged = true;
+            }
+        } else {
+            if(newDecorations.remove(decoration)) {
+                formatChanged = true;
+            }
+        }
+    }
+
+    public void decorations(Set<ChatColor> decorations) {
+        for(ChatColor deco : ChatColor.DECORATIONS) {
+            decoration(deco, decorations.contains(deco));
+        }
+    }
+
+    public void format(ChatColor color, Set<ChatColor> decorations) {
+        color(color);
+        decorations(decorations);
+    }
+}
diff --git a/chat/src/main/java/net/md_5/bungee/api/chat/BaseComponent.java b/chat/src/main/java/net/md_5/bungee/api/chat/BaseComponent.java
index 577e612c..510ccbe1 100644
--- a/chat/src/main/java/net/md_5/bungee/api/chat/BaseComponent.java
+++ b/chat/src/main/java/net/md_5/bungee/api/chat/BaseComponent.java
@@ -1,14 +1,16 @@
 package net.md_5.bungee.api.chat;
 
 import com.google.common.base.Joiner;
-import lombok.AccessLevel;
 import lombok.Getter;
 import lombok.NoArgsConstructor;
 import lombok.Setter;
 import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.ChatStringBuilder;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.EnumMap;
+import java.util.EnumSet;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
@@ -19,9 +21,6 @@ import java.util.Set;
 public abstract class BaseComponent
 {
 
-    @Setter(AccessLevel.NONE)
-    BaseComponent parent;
-
     /**
      * The color of this component and any child components (unless overridden)
      */
@@ -146,15 +145,7 @@ public abstract class BaseComponent
      */
     public ChatColor getColor()
     {
-        if ( color == null )
-        {
-            if ( parent == null )
-            {
-                return ChatColor.WHITE;
-            }
-            return parent.getColor();
-        }
-        return color;
+        return color != null ? color : ChatColor.WHITE;
     }
 
     /**
@@ -168,6 +159,10 @@ public abstract class BaseComponent
         return color;
     }
 
+    public ChatColor getColor(ChatColor def) {
+        return color != null ? color : def;
+    }
+
     /**
      * Returns whether this component is bold. This uses the parent's setting if
      * this component hasn't been set. false is returned if none of the parent
@@ -177,11 +172,7 @@ public abstract class BaseComponent
      */
     public boolean isBold()
     {
-        if ( bold == null )
-        {
-            return parent != null && parent.isBold();
-        }
-        return bold;
+        return bold != null && bold;
     }
 
     /**
@@ -204,11 +195,7 @@ public abstract class BaseComponent
      */
     public boolean isItalic()
     {
-        if ( italic == null )
-        {
-            return parent != null && parent.isItalic();
-        }
-        return italic;
+        return italic != null && italic;
     }
 
     /**
@@ -231,11 +218,7 @@ public abstract class BaseComponent
      */
     public boolean isUnderlined()
     {
-        if ( underlined == null )
-        {
-            return parent != null && parent.isUnderlined();
-        }
-        return underlined;
+        return underlined != null && underlined;
     }
 
     /**
@@ -258,11 +241,7 @@ public abstract class BaseComponent
      */
     public boolean isStrikethrough()
     {
-        if ( strikethrough == null )
-        {
-            return parent != null && parent.isStrikethrough();
-        }
-        return strikethrough;
+        return strikethrough != null && strikethrough;
     }
 
     /**
@@ -285,11 +264,7 @@ public abstract class BaseComponent
      */
     public boolean isObfuscated()
     {
-        if ( obfuscated == null )
-        {
-            return parent != null && parent.isObfuscated();
-        }
-        return obfuscated;
+        return obfuscated != null && obfuscated;
     }
 
     /**
@@ -305,10 +280,6 @@ public abstract class BaseComponent
 
     public void setExtra(List<BaseComponent> components)
     {
-        for ( BaseComponent component : components )
-        {
-            component.parent = this;
-        }
         extra = components;
     }
 
@@ -335,7 +306,6 @@ public abstract class BaseComponent
         {
             extra = new ArrayList<BaseComponent>();
         }
-        component.parent = this;
         extra.add( component );
     }
 
@@ -383,60 +353,107 @@ public abstract class BaseComponent
      */
     public String toLegacyText()
     {
-        StringBuilder builder = new StringBuilder();
-        toLegacyText( builder );
+        ChatStringBuilder builder = new ChatStringBuilder();
+        toLegacyText(builder, ChatColor.WHITE, Collections.<ChatColor>emptySet());
         return builder.toString();
     }
 
-    void toLegacyText(StringBuilder builder)
+    protected void toLegacyText(ChatStringBuilder builder, ChatColor color, Set<ChatColor> decorations)
     {
+        color = getColor(color);
+        decorations = getDecorations(decorations);
+
+        toLegacyTextContent(builder, color, decorations);
+
         if ( extra != null )
         {
             for ( BaseComponent e : extra )
             {
-                e.toLegacyText( builder );
+                e.toLegacyText( builder, color, decorations );
             }
         }
     }
 
-    protected static final ChatColor[] DECORATIONS = {
-        ChatColor.BOLD,
-        ChatColor.ITALIC,
-        ChatColor.UNDERLINE,
-        ChatColor.STRIKETHROUGH,
-        ChatColor.MAGIC
-    };
+    protected void toLegacyTextContent(ChatStringBuilder builder, ChatColor color, Set<ChatColor> decorations) {
+    }
 
     protected static final Joiner JOINER = Joiner.on(", ");
 
-    public Boolean hasFormatRaw(ChatColor format) {
-        switch(format) {
+    public Boolean getDecoration(ChatColor decoration) {
+        switch(decoration) {
             case BOLD: return isBoldRaw();
             case ITALIC: return isItalicRaw();
             case UNDERLINE: return isUnderlinedRaw();
             case STRIKETHROUGH: return isStrikethroughRaw();
             case MAGIC: return isObfuscatedRaw();
-            case RESET: return null;
+            default: return null;
         }
+    }
 
-        if(getColorRaw() == null) {
-            return null;
+    public boolean getDecoration(ChatColor decoration, boolean def) {
+        Boolean flag = getDecoration(decoration);
+        if(flag != null) {
+            return flag;
         } else {
-            return getColorRaw() == format;
+            return def;
         }
     }
 
-    public Map<ChatColor, Boolean> getFormatsRaw() {
-        EnumMap<ChatColor, Boolean> formats = new EnumMap(ChatColor.class);
+    public void setDecoration(ChatColor decoration, Boolean flag) {
+        switch(decoration) {
+            case BOLD: setBold(flag); return;
+            case ITALIC: setItalic(flag); return;
+            case UNDERLINE: setUnderlined(flag); return;
+            case STRIKETHROUGH: setStrikethrough(flag); return;
+            case MAGIC: setObfuscated(flag); return;
+        }
+    }
 
-        if(getColorRaw() != null) formats.put(getColorRaw(), true);
+    public Map<ChatColor, Boolean> getDecorations() {
+        EnumMap<ChatColor, Boolean> decos = new EnumMap(ChatColor.class);
+        for(ChatColor deco : ChatColor.DECORATIONS) {
+            final Boolean flag = getDecoration(deco);
+            if(flag != null) decos.put(deco, flag);
+        }
+        return decos;
+    }
 
-        for(ChatColor format : DECORATIONS) {
-            final Boolean flag = hasFormatRaw(format);
-            if(flag != null) formats.put(format, flag);
+    public Set<ChatColor> getDecorations(Set<ChatColor> def) {
+        EnumSet<ChatColor> decos = EnumSet.noneOf(ChatColor.class);
+        for(ChatColor deco : ChatColor.DECORATIONS) {
+            if(getDecoration(deco, def.contains(deco))) {
+                decos.add(deco);
+            }
         }
+        return decos;
+    }
+
+    public void mergeDecorations(BaseComponent from) {
+        for(ChatColor deco : ChatColor.DECORATIONS) {
+            Boolean flag = from.getDecoration(deco);
+            if(flag != null) setDecoration(deco, flag);
+        }
+    }
+
+    public void mergeColor(BaseComponent from) {
+        if(from.getColorRaw() != null) {
+            setColor(from.getColorRaw());
+        }
+    }
+
+    public void mergeEvents(BaseComponent from) {
+        if(from.getClickEvent() != null) {
+            setClickEvent(from.getClickEvent());
+        }
+        if(from.getHoverEvent() != null) {
+            setHoverEvent(from.getHoverEvent());
+        }
+    }
 
-        return formats;
+    public void mergeFormatting(BaseComponent from) {
+        mergeDecorations(from);
+        mergeColor(from);
+        mergeEvents(from);
     }
 
     protected void toStringTerminal(List<String> fields) {
@@ -444,8 +461,8 @@ public abstract class BaseComponent
             fields.add("color=\"" + getColorRaw().name().toLowerCase() + "\"");
         }
 
-        for(ChatColor format : DECORATIONS) {
-            final Boolean flag = hasFormatRaw(format);
+        for(ChatColor format : ChatColor.DECORATIONS) {
+            final Boolean flag = getDecoration(format);
             if(flag != null) {
                 fields.add(format.name().toLowerCase() + "=" + flag);
             }
diff --git a/chat/src/main/java/net/md_5/bungee/api/chat/TextComponent.java b/chat/src/main/java/net/md_5/bungee/api/chat/TextComponent.java
index 9e21ee98..c8ef9791 100644
--- a/chat/src/main/java/net/md_5/bungee/api/chat/TextComponent.java
+++ b/chat/src/main/java/net/md_5/bungee/api/chat/TextComponent.java
@@ -5,11 +5,13 @@ import lombok.Getter;
 import lombok.NoArgsConstructor;
 import lombok.Setter;
 import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.ChatStringBuilder;
 import org.apache.commons.lang.StringEscapeUtils;
 
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
+import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -187,31 +189,10 @@ public class TextComponent extends BaseComponent
     }
 
     @Override
-    protected void toLegacyText(StringBuilder builder)
+    protected void toLegacyTextContent(ChatStringBuilder builder, ChatColor color, Set<ChatColor> decorations)
     {
-        builder.append( getColor() );
-        if ( isBold() )
-        {
-            builder.append( ChatColor.BOLD );
-        }
-        if ( isItalic() )
-        {
-            builder.append( ChatColor.ITALIC );
-        }
-        if ( isUnderlined() )
-        {
-            builder.append( ChatColor.UNDERLINE );
-        }
-        if ( isStrikethrough() )
-        {
-            builder.append( ChatColor.STRIKETHROUGH );
-        }
-        if ( isObfuscated() )
-        {
-            builder.append( ChatColor.MAGIC );
-        }
+        builder.format(color, decorations);
         builder.append( text );
-        super.toLegacyText( builder );
     }
 
     @Override protected void toStringTerminal(List<String> fields) {
diff --git a/chat/src/main/java/net/md_5/bungee/api/chat/TranslatableComponent.java b/chat/src/main/java/net/md_5/bungee/api/chat/TranslatableComponent.java
index 231ed912..7725ba0c 100644
--- a/chat/src/main/java/net/md_5/bungee/api/chat/TranslatableComponent.java
+++ b/chat/src/main/java/net/md_5/bungee/api/chat/TranslatableComponent.java
@@ -3,13 +3,17 @@ package net.md_5.bungee.api.chat;
 import lombok.Getter;
 import lombok.NoArgsConstructor;
 import lombok.Setter;
-import net.md_5.bungee.api.ChatColor;
+
 import java.util.ArrayList;
 import java.util.List;
 import java.util.MissingResourceException;
 import java.util.ResourceBundle;
+import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
+
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.ChatStringBuilder;
 import org.apache.commons.lang.StringEscapeUtils;
 
 @Getter
@@ -98,10 +102,6 @@ public class TranslatableComponent extends BaseComponent
      */
     public void setWith(List<BaseComponent> components)
     {
-        for ( BaseComponent component : components )
-        {
-            component.parent = this;
-        }
         with = components;
     }
 
@@ -128,7 +128,6 @@ public class TranslatableComponent extends BaseComponent
         {
             with = new ArrayList<BaseComponent>();
         }
-        component.parent = this;
         with.add( component );
     }
 
@@ -178,7 +177,7 @@ public class TranslatableComponent extends BaseComponent
     }
 
     @Override
-    protected void toLegacyText(StringBuilder builder)
+    protected void toLegacyTextContent(ChatStringBuilder builder, ChatColor color, Set<ChatColor> decorations)
     {
         String trans;
         try
@@ -197,7 +196,7 @@ public class TranslatableComponent extends BaseComponent
             int pos = matcher.start();
             if ( pos != position )
             {
-                addFormat( builder );
+                builder.format( color, decorations );
                 builder.append( trans.substring( position, pos ) );
             }
             position = matcher.end();
@@ -208,45 +207,19 @@ public class TranslatableComponent extends BaseComponent
                 case 's':
                 case 'd':
                     String withIndex = matcher.group( 1 );
-                    with.get( withIndex != null ? Integer.parseInt( withIndex ) - 1 : i++ ).toLegacyText( builder );
+                    with.get( withIndex != null ? Integer.parseInt( withIndex ) - 1 : i++ ).toLegacyText( builder, color, decorations );
                     break;
                 case '%':
-                    addFormat( builder );
+                    builder.format( color, decorations );
                     builder.append( '%' );
                     break;
             }
         }
         if ( trans.length() != position )
         {
-            addFormat( builder );
+            builder.format( color, decorations );
             builder.append( trans.substring( position, trans.length() ) );
         }
-        super.toLegacyText( builder );
-    }
-
-    private void addFormat(StringBuilder builder)
-    {
-        builder.append( getColor() );
-        if ( isBold() )
-        {
-            builder.append( ChatColor.BOLD );
-        }
-        if ( isItalic() )
-        {
-            builder.append( ChatColor.ITALIC );
-        }
-        if ( isUnderlined() )
-        {
-            builder.append( ChatColor.UNDERLINE );
-        }
-        if ( isStrikethrough() )
-        {
-            builder.append( ChatColor.STRIKETHROUGH );
-        }
-        if ( isObfuscated() )
-        {
-            builder.append( ChatColor.MAGIC );
-        }
     }
 
     @Override
diff --git a/chat/src/test/java/net/md_5/bungee/api/chat/TranslatableComponentTest.java b/chat/src/test/java/net/md_5/bungee/api/chat/TranslatableComponentTest.java
index 0837c672..c637af56 100644
--- a/chat/src/test/java/net/md_5/bungee/api/chat/TranslatableComponentTest.java
+++ b/chat/src/test/java/net/md_5/bungee/api/chat/TranslatableComponentTest.java
@@ -11,6 +11,6 @@ public class TranslatableComponentTest
     {
         TranslatableComponent testComponent = new TranslatableComponent( "Test string with %s placeholders: %s", "2", "aoeu" );
         assertEquals( "Test string with 2 placeholders: aoeu", testComponent.toPlainText() );
-        assertEquals( "§fTest string with §f2§f placeholders: §faoeu", testComponent.toLegacyText() );
+        assertEquals( "§fTest string with 2 placeholders: aoeu", testComponent.toLegacyText() );
     }
 }
diff --git a/proxy/src/test/java/net/md_5/bungee/chat/ComponentsTest.java b/proxy/src/test/java/net/md_5/bungee/chat/ComponentsTest.java
index c844dab5..f696d014 100644
--- a/proxy/src/test/java/net/md_5/bungee/chat/ComponentsTest.java
+++ b/proxy/src/test/java/net/md_5/bungee/chat/ComponentsTest.java
@@ -77,13 +77,13 @@ public class ComponentsTest
 
         Assert.assertEquals( "Given Golden Sword * 5 to thinkofdeath", translatableComponent.toPlainText() );
         Assert.assertEquals( ChatColor.WHITE + "Given " + ChatColor.AQUA + "Golden Sword" + ChatColor.WHITE
-                + " * " + ChatColor.WHITE + "5" + ChatColor.WHITE + " to " + ChatColor.WHITE + "thinkofdeath",
+                + " * 5 to thinkofdeath",
                 translatableComponent.toLegacyText() );
 
         TranslatableComponent positional = new TranslatableComponent( "book.pageIndicator", "5", "50" );
 
         Assert.assertEquals( "Page 5 of 50", positional.toPlainText() );
-        Assert.assertEquals( ChatColor.WHITE + "Page " + ChatColor.WHITE + "5" + ChatColor.WHITE + " of " + ChatColor.WHITE + "50", positional.toLegacyText() );
+        Assert.assertEquals( ChatColor.WHITE + "Page 5 of 50", positional.toLegacyText() );
     }
 
     @Test
-- 
2.11.0 (Apple Git-81)

